	// ActionScript Document//Alphanumberic function allow only character and numeric value...function alphaNumeric(e) {	if ( e.altKey) {	//if (e.shiftKey || e.ctrlKey || e.altKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8) || (key == 32) ||(key == 9)				|| (key == 46)				|| (key >= 35 && key <= 40)				|| (key >= 65 && key <= 90)				|| (key >= 48 && key <= 57) || (key >= 96 && key <= 105))) {			e.preventDefault();		}	}}// Function onlyalphabet() allow only character  without space  & ,  & . function onlyalphabet(e) {	if ( e.altKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8) ||(key == 9)				|| (key == 46)				|| (key >= 35 && key <= 40)				|| (key >= 65 && key <= 90))) {			e.preventDefault();		}	}}function alphacharacternew(e) {       				// this function for city, state...  with space   	//if (e.shiftKey || e.ctrlKey || e.altKey) {	if ( e.altKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8) || (key == 32) ||(key == 9)				|| (key == 46)				|| (key >= 35 && key <= 40)				|| (key >= 65 && key <= 90))) {			 e.preventDefault();		}	}}function alphacharatercoma(e) {       				// this function for city, state...  with space   and coma  and  . 	//if (e.shiftKey || e.ctrlKey || e.altKey) {	if ( e.altKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8) || (key == 32) ||(key == 9)				|| (key == 46)|| (key == 188)|| (key == 190)				|| (key >= 35 && key <= 40)				|| (key >= 65 && key <= 90))) {			 e.preventDefault();		}	}}//Function numericonly allow only numeric Integer valuefunction numericonlyInt(e) {		//if (e.shiftKey || e.ctrlKey || e.altKey) {	if ( e.altKey || e.shiftKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8)  ||(key == 9)				|| (key == 46)				|| (key >= 35 && key <= 40)				|| (key >= 48 && key <= 57) || (key >= 96 && key <= 105))) {			e.preventDefault();		}	}}//Function numericonly allow only numeric with Floating point valuefunction numericonlyFloat(e) {	//if (e.shiftKey || e.ctrlKey || e.altKey) {	if ( e.altKey) {		e.preventDefault();	} else {		var key = e.keyCode;		if (!((key == 8)||(key == 9)				|| (key == 46) ||(key == 190)				|| (key >= 35 && key <= 40)				|| (key >= 48 && key <= 57) || (key >= 96 && key <= 105))) {			e.preventDefault();		}	}}// FOLLOWING FUNCTIONS  FROM OLD FILE// =========  ====  ================function getkey(e) {	if (window.event) {		return window.event.keyCode;	} else {				if (e) {			return e.which;		} else {			return null;		}	}}		//goodchars function return only allow passing value use for numeric validationfunction goodchars(e, goods) {	var key, keychar;	key = getkey(e);	if (key == null) {		return true;	}		// get character	keychar = String.fromCharCode(key);	keychar = keychar.toLowerCase();	goods = goods.toLowerCase();		// check goodkeys	if (goods.indexOf(keychar) != -1) {		return true;	}		// control keys	if (key == null || key == 0 || key == 8 || key == 9 || key == 13 || key == 27) {		return true;	}		// else return false	return false;}function ChangeUpperCase(e) {		//return data in upper case format			//<input type="text" name="txtSlabFrom" class="text" onKeyDown="return ChangeUpperCase(this)">	return e.value = e.value.toUpperCase();}	//compare date function return date comparision i.e. fromdate is less than todatefunction compareDate(fromDate, toDate) {	var dt1 = parseInt(fromDate.substring(0, 2), 10);	var mon1 = parseInt(fromDate.substring(3, 5), 10);	var yr1 = parseInt(fromDate.substring(6, 10), 10);	var dt2 = parseInt(toDate.substring(0, 2), 10);	var mon2 = parseInt(toDate.substring(3, 5), 10);	var yr2 = parseInt(toDate.substring(6, 10), 10);	var date1 = new Date(yr1, mon1, dt1);	var date2 = new Date(yr2, mon2, dt2);	if (date1 > date2) {		return 1;	} else {		if (date1 < date2) {			return -1;		} else {			return 0;		}	}}	// Formats The Number Into Comma Separated Formatfunction formateNumber(amt) {	var numberTest = new NumberFormat(amt);	numberTest.setCommas(true);	numberTest.setCurrency(false);	numberTest.setPlaces(0);	return numberTest.toFormatted();}	// Formats The Comma Separated Format Into Number	function ReformateNumber(amt) {	var numberTest = new NumberFormat(amt);	numberTest.setCommas(false);	numberTest.setCurrency(false);	numberTest.setPlaces(0);	return numberTest.toFormatted();}	//Check the Month and Day if They are valid number or notfunction checkDate(dateString) {	var dateArray = dateString.split("/");	if (Number(dateArray[0]) < 1 || Number(dateArray[0]) > 31 || Number(dateArray[1]) < 1 || Number(dateArray[1]) > 12) {		alert("Please Enter Valid Date");		return 1;	}		//get Month Name	var monthName = getMonthName(dateArray[1]);				//Convert Given String to GMT Formate		var gmtDateString = new Date(Date.UTC(dateArray[2], dateArray[1] - 1, dateArray[0])).toGMTString();			//Covert it into array form	var myDate_array = gmtDateString.split(" ");			//Compare Date	if (myDate_array[2] != monthName) {		alert("Please Enter Valid Date");		return 1;	}	return 0;}	// Returns The Month Name On Passing Month Numberfunction getMonthName(no) {	if (no == 1) {		return "Jan";	}	if (no == 2) {		return "Feb";	}	if (no == 3) {		return "Mar";	}	if (no == 4) {		return "Apr";	}	if (no == 5) {		return "May";	}	if (no == 6) {		return "Jun";	}	if (no == 7) {		return "Jul";	}	if (no == 8) {		return "Aug";	}	if (no == 9) {		return "Sep";	}	if (no == 10) {		return "Oct";	}	if (no == 11) {		return "Nov";	}	if (no == 12) {		return "Dec";	}}	// Use To Block The F11 Key Which Is Used to Maximize The Page	function blockF11Key(evt) {	if (evt.keyCode == 122) {		evt.keyCode = 0;		evt.returnValue = false;	}}	// Use To Check Whether The Field Is Empty Or Not	// Returns True If Field Is Empty Else Return Falsefunction isEmpty(field) {	if ((field.value == "") || (field.length == 0)) {		return true;	} else {		return false;	}}	// Use To Set Focus To Particular Fieldfunction setFocus(field) {	field.focus();}function parseValue(text) {	var textBuffer = "";	var pos = 0;	while (true) {		var quoteIndex = text.indexOf("'", pos);		if (quoteIndex == -1) {			textBuffer += text.substr(pos);			break;		}		textBuffer += text.substring(pos, quoteIndex);		textBuffer += "''";		pos = quoteIndex + 1;	}	return textBuffer;}function validateNumber(e) {	var unicode = e.charCode ? e.charCode : e.keyCode;	if (unicode != 8) {		if (unicode < 48 || unicode > 57) {			return false;		}	}}//alphaNumeric Validation with spacefunction alphaNumerictest(id){			   $('#'+id).bind('keypress',"cut copy paste", function (event) {     /* //  ==> for open link on enter button press      * if (event.which == 13 || event.keyCode == 13) {         window.location.href = "search.aspx?tx=" + $(this).val();         return false;     } else { */		         var regex = new RegExp("^[.a-zA-Z0-9 \s]+$");         var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);         if (!regex.test(key)) {             event.preventDefault();             return false;        /*  } */                      }     return true;     });				}// Disable cut copy and pastefunction disablePaste(id){$('#'+id).bind("cut copy paste",function(e) {      e.preventDefault();   });}